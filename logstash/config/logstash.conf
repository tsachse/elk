input {
  file {
    # path => "/data/testdaten/*.trc.029"
    path => "/data/*.trc"
    type => "errlog"
    start_position => "beginning"
    codec => multiline {
      pattern => "^[^0-9]"
      what => "previous"
      charset => "ISO-8859-1"
    }
  }
  file {
    path => "/data/*.json"
    type => "tts"
    start_position => "beginning"
  }
}
filter {
  if [type] == "errlog" {
    grok { 
      match => { 
	"message" => '\A%{NOTSPACE:datum}%{SPACE}%{TIME:zeit}%{SPACE}%{HOSTNAME:hostname}%{SPACE}%{INT:pid}%{SPACE}%{USER:nutzer}%{SPACE}%{PROG:programm}%{SPACE}%{GREEDYDATA:nachricht}' 
      } 
    }
    grok { 
      match => { 
	"nachricht" => [
	  '\A%{DATA}-t%{SPACE}%{NUMBER:tag}%{SPACE}-s%{SPACE}%{NUMBER:lvs}',
	  '\A%{DATA}-lt%{SPACE}%{NUMBER:tag}%{SPACE}-s%{SPACE}%{NUMBER:lvs}'
	]
      } 
    }
    grok { 
      match => { 
	"nachricht" => [
	  '\A%{DATA}-b%{SPACE}%{NUMBER:batch}%{SPACE}-bt%{SPACE}%{NUMBER:batch_typ}'
	]
      } 
    }
    mutate {
      add_field => {
	"datum_zeit" => "%{datum} %{zeit}"
      }
    }
    date {
      match => ["datum_zeit", 'YYYY/MM/dd HH:mm:ss']
      timezone => "Europe/Berlin"
      locale => de
      remove_field => ["datum_zeit"]
    }
  }
  if [type] == "tts" {
    json {
      source => "message"
    }
    mutate {
      add_field => {
	"datum_zeit" => "%{datum} %{zeit}"
      }
    }
    date {
      match => ["datum_zeit", 'dd.MM.YY HH:mm:ss']
      timezone => "Europe/Berlin"
      locale => de
      remove_field => ["datum_zeit"]
    }
  }
}
output {
  #stdout {
  #  codec => rubydebug
  #}
  elasticsearch {
    host => es1
    protocol=> "http"
    cluster => "smoker"
    # index => "logstash_%{+YYYY.MM.dd}"
    index => "logstash_029"
  }
}

# docker build -t logstash .
# docker run -d -v /home/sachse_t/Docker/elk/logstash:/data --name ls1 logstash 
